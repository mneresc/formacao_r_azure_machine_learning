?matplot
example(matplot)
example(matplot)
17%2
17%%2
7^7
7+7
7*7
7^7
17%%2
x>0
x=666
y=0
x>0
x>0 & y<1
x=666
y=0
x>0 & y<1
x>0 || y<1
typeof(100)
mode(100)
x=100
mode(100)
typeof(100)
#lista
lista = c('Sócrates','Ariatóteles','Platão')
mode(lista)
#lista
lista = c('Sócrates','Ariatóteles','Platão',1)
mode(lista)
#lista
lista = c('Sócrates','Ariatóteles','Platão')
#closure
func = function(x) {x**2}
print(funt(2))
#closure
func = function(x) {x**2}
print(funt(2))
func = function(x) {x**2}
print(funt(2))
print(func(2))
x=100
# modo de armazenamento de um objeto
mode(100)
# verificao tipo da variavel
typeof(100)
#lista
lista = c('Sócrates','Ariatóteles','Platão')
mode(lista)
#closure
func = function(x) {x**2}
print(func(2))
num <- 7
class(num)
typeof(num)
mode(numm)
mode(num)
is.integer(num)
num_int = num.asinteger()
num_int = as.integer(num)
char = c('Data','Science','Academy')
class(char)
mode(char)
typeof(char)
complex = 2.5 + 4i
class(complex)
mode(complex)
typeof(complex)
print(complex)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
help(matrix)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <-matrix(1:20, nrow = 2)
help(matrix)
View(matriz)
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <- matrix(1:20, nrow = 2)
# array 2 ou mais dimenssões
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
length(iris)
mode(iris)
#lista composta
lista1 <- list(a = matriz, b = vetor)
View(lista1)
View(lista1)
View(lista1)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <- matrix(1:20, nrow = 2)
# array 2 ou mais dimenssões
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
length(iris)
mode(iris)
#lista composta
lista1 <- list(a = matriz, b = vetor)
lista1[c] = iris
View(lista1)
lista1[c] = iris
lista1[c] = vetor
mode(iris)
lista1['c'] = vetor
lista1.append(vetor)
install.packages('sqldf')
library(sqldf)
sqldf('SELECT equipe, sum(num_cestas) FROM tabela_basquete grop by equipe')
sqldf('SELECT equipe, sum(num_cestas) FROM tabela_basquete group by equipe')
tabela_basquete <-
data.frame(equipe = gl(5, 5, labels = paste("Equipe", LETTERS[1:5])),
jogador = sample(letters, 25),
num_cestas = floor(runif(25, min=0, max=50)))
View(tabela_basquete)
summary(tabela_basquete)
sqldf('SELECT equipe, sum(num_cestas) FROM tabela_basquete group by equipe')
#t apply soma, agrupado funcao
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, sum)
print(unlist(list1))
# funcoes especiais
#vetor com elementos da lista
list1 = list(c(1,2,3),c(4,5,6))
print(unlist(list1))
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(list1,mean)
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(mean,list1)
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(mean,unlist(list1))
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(mean,list1)
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(rbind,list1)
?rbind
print(strsplit(texto,""))
print(strsplit(texto," "))
#strplit
texto <- "Seu tranca ruas é uma beleza eu nunca vi um Exu assim"
print(strsplit(texto," "))
matrix_mean <- matrix(data = (0:16), nrow = 4)
View(matrix_mean)
matrix_mean <- matrix(data = (1:16), nrow = 4, ncol = 4)
View(matrix_mean)
rowsmean(matrix_mean)
rowsmeans(matrix_mean)
rowmeans(matrix_mean)
rowMeans(matrix_mean)
View(escola)
# Exercicio 3 - Considere o dataframe abaixo.
# Calcule a média por disciplina e depois calcule a média de apenas uma disciplina
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
View(escola)
mean(escola.Matematica)
mean(escola$Matematica)
aggregate(x = escola$Matematica ~ escola$Geografia ~ escola$Quimica, by=list(escola$Aluno), FUN = mean )
aggregate(x = escola$Matematica , by=list(escola$Aluno), FUN = mean )
aggregate(x = c(escola$Matematica,escola$Geografia,escola$Quimica), by=list(escola$Aluno), FUN = mean )
aggregate(x = c(escola$Matematica,escola$Geografia,escola$Quimica), by=list(escola$Aluno), FUN = mean )
aggregate(x = escola$Matematica, by=list(escola$Aluno), FUM = mean )
aggregate(x = escola$Matematica, by=list(escola$Aluno), FUN = mean )
aggregate(x = escola$Geografia, by=list(escola$Aluno), FUN = mean )
aggregate(x = escola$Quimica, by=list(escola$Aluno), FUN = mean )
mean(escola$Matematica)
lista <- list(1,2,3)
cumsum(lista)
sum(lista)
# Exercicio 5 - Transforme a lista anterior um vetor
vec <- as.vector(lista)
nova <- str_replace(str,'textos', 'frases')
# Exercicio 6 - Considere a string abaixo. Substitua a palavra "textos" por "frases"
str <- c("Expressoes", "regulares", "em linguagem R",
"permitem a busca de padroes", "e exploracao de textos",
"podemos buscar padroes em digitos",
"como por exemplo",
"10992451280")
nova <- str_replace(str,'textos', 'frases')
nova <- str_replace(str,'textos', 'frases')
library(stringr)
nova <- str_replace(str,'textos', 'frases')
print(nova)
# Exercicio 7 - Usando o dataset mtcars, crie um gráfico com ggplot do tipo
# scatter plot. Use as colunas disp e mpg nos eixos x e y respectivamente
View(mtcars)
qplot(mtcars$disp,mtcars$mpg)
library(ggplot2)
qplot(mtcars$disp,mtcars$mpg)
# Exercício 9 - Qual o erro do código abaixo?
data(diamonds)
View(diamonds)
ggplot(data = diamonds, aes(x = price, group = group, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = color, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_barplot() +
labs(fill = "cyl")
# Exercício 10 - Qual o erro do código abaixo?
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/projects/DataScience/R Azure ML/big_data_r_azure/Mod04/")
matrix_mean <- matrix(data = (1:16), nrow = 4, ncol = 4)
View(matrix_mean)
rowMeans(matrix_mean)
apply(matrix_mean, 1, mean)
apply(escola[, c(2, 3, 4)], 2, mean)
do.call(sum, lst)
# Exercicio 4 - Crie uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
lst <- list(a = 1:10, b = 1:5)
lst
do.call(sum, lst)
do.call(sum, lista)
