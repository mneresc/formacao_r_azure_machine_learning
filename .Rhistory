#lista
lista = c('Sócrates','Ariatóteles','Platão',1)
mode(lista)
#lista
lista = c('Sócrates','Ariatóteles','Platão')
#closure
func = function(x) {x**2}
print(funt(2))
#closure
func = function(x) {x**2}
print(funt(2))
func = function(x) {x**2}
print(funt(2))
print(func(2))
x=100
# modo de armazenamento de um objeto
mode(100)
# verificao tipo da variavel
typeof(100)
#lista
lista = c('Sócrates','Ariatóteles','Platão')
mode(lista)
#closure
func = function(x) {x**2}
print(func(2))
num <- 7
class(num)
typeof(num)
mode(numm)
mode(num)
is.integer(num)
num_int = num.asinteger()
num_int = as.integer(num)
char = c('Data','Science','Academy')
class(char)
mode(char)
typeof(char)
complex = 2.5 + 4i
class(complex)
mode(complex)
typeof(complex)
print(complex)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
help(matrix)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <-matrix(1:20, nrow = 2)
help(matrix)
View(matriz)
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <- matrix(1:20, nrow = 2)
# array 2 ou mais dimenssões
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
length(iris)
mode(iris)
#lista composta
lista1 <- list(a = matriz, b = vetor)
View(lista1)
View(lista1)
View(lista1)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <- matrix(1:20, nrow = 2)
# array 2 ou mais dimenssões
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
length(iris)
mode(iris)
#lista composta
lista1 <- list(a = matriz, b = vetor)
lista1[c] = iris
View(lista1)
lista1[c] = iris
lista1[c] = vetor
mode(iris)
lista1['c'] = vetor
lista1.append(vetor)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <- matrix(1:20, nrow = 2)
# array 2 ou mais dimenssões
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
length(iris)
mode(iris)
#lista composta
lista1 <- list(a = matriz, b = vetor)
lista1.append(vetor)
mean(iris)
print(vator[1])
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
print(vator[1])
#matriz 2 dimensoes e 1 tipo de dado
matriz <- matrix(1:20, nrow = 2)
# array 2 ou mais dimenssões
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
length(iris)
mode(iris)
#lista composta
lista1 <- list(a = matriz, b = vetor)
lista1.append(vetor)
vetor <- c(1:20)
print(vator[1])
vetor <- c(1:20)
print(vetor[1])
vetor2 <- c(1:20)
vetor3 <- c(20:40)
vetorConjunto = c(vetor2, vetor3)
print(vetorConjunto)
vetor2 <- c(1:20)
vetor3 <- c(20:40)
vetorConjunto = c(vetor2, vetor3)
print(vetorConjunto)
vetor3 **  vetor2
matriz = matrix(c(1:6), nr = 2)
View(matriz)
matriz2D = matrix(c(1:6), nr = 2)
matriz3D = matrix(c(1:6), nr = 2)
View(matriz2D)
View(matriz3D)
matriz = matrix(c(1:6), nr = 2)
matriz2D = matrix(c(1:6), nr = 3)
matriz3D = matrix(c(1:6), nr = 6)
matriz = matrix(c(1:6), nr = 2)
matriz2D = matrix(c(1:6), nr = 3)
matriz3D = matrix(c(1:6), nr = 6)
View(matriz3D)
matriz2C = matrix(c(1:6), nc = 2)
View(matriz3D)
#numero de linhas
matriz = matrix(c(1:6), nr = 2)
matriz2 = matrix(c(1:6), nr = 3)
matriz3 = matrix(c(1:6), nr = 6)
#numero de colunas
matriz2C = matrix(c(1:6), nc = 2)
View(matriz2C)
matriz2C = matrix(c(1:6), nc = 2, byrow = T)
View(matriz2C)
diag(matriz2C)
View(matriz2C)
matriz2C = matrix(c(1:4), nc = 2, byrow = T)
diag(matriz2C)
matriz2C[:-1]
matriz2C[ :-1]
matriz2C[ ,-1]
View(matriz2C)
lista_char = list('A','B','C')
lista_char1
list_char2 = list(c('A','A'),'B','C')
list_char2
View(list_char2)
list[1]
list_char2[1]
list_char2[1][1]
list_char2[0][1]
1
list_char2[2][1]
names(lista_char2) -< c('Col1','Col2','Col3')
names(lista_char2) <- c('Col1','Col2','Col3')
list_char2 = list(c('A','A'),'B','C')
list_char2
list_char2[2][1]
names(lista_char2) <- c('Col1','Col2','Col3')
names(list_char2) <- c('Col1','Col2','Col3')
list_char2$Col1
length(list_char2)
mode(list_char2)
mode(list_char2$Col1)
texto <- "Niguém é verdadeiramente livre"
class(texto)
mode(texto)
sprintf('% .Todos somos prisioneiros de nossas escolhas',texto)
sprintf('%s .Todos somos prisioneiros de nossas escolhas',texto)
cat(texto,texto2)
texto <- "Niguém é verdadeiramente livre"
texto2 <- "Todos somos prisioneiros de nossas escolhas"
class(texto)
mode(texto)
sprintf('%s .$s',texto, texto2)
cat(texto,texto2)
sprintf('%s .%s',texto, texto2)
nchar(texto)
substr(texto,0,7)
substr(texto,0,8)
texto <- "Niguém é verdadeiramente livre"
texto2 <- "Todos somos prisioneiros de nossas escolhas"
strsplit(texto,'é')
strsplit(texto,'verdadeiramente')
strcount(texto,'é')
str_count(texto,'é')
#pacote de string
library(stringr)
strsplit(texto,'verdadeiramente')
str_count(texto,'é')
source('~/projects/DataScience/R Azure ML/big_data_r_azure/07-strings.R')
df -< data.frame()
df <- data.frame()
nomes <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
colum <- c('Nome','Frase','Número aleatório')
df <- data.frame(Nome = nomes, Frase = Frase, Numero = numero)
df <- data.frame(nomes, Frase = frase, Numero = numero)
nomes <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
colum <- c('Nome','Frase','Número aleatório')
df <- data.frame(nomes, Frase = frase, Numero = numero)
View(df)
nomes <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
colum <- c('Nome','Frase','Número aleatório')
df <- data.frame(Nomes = nomes, Frase = frase, Numero = numero)
View(df)
df = cbind(df,locura)
locura <- c('X','Y')
df = cbind(df,locura)
View(df)
head(df)
tail(df)
View(df)
df[Nome = 'Jubileu']
df[Nome = 'Jubileu',]
df[Nome == 'Jubileu',]
nomes <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
locura <- c('X','Y')
colum <- c('Nome','Frase','Número aleatório')
df <- data.frame(Nomes = nomes, Frase = frase, Numero = numero)
df = cbind(df,locura)
head(df)
tail(df)
View(df)
df[Nome == 'Jubileu',]
df[Nomes == 'Jubileu',]
nomes <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
locura <- c('X','Y')
df <- data.frame(Nome = nomes, Frase = frase, Numero = numero)
df = cbind(df,locura)
head(df)
tail(df)
View(df)
df[Nomes == 'Jubileu',]
df[Nomes == 'Jubileu']
df[Nome == 'Jubileu']
nomes <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
locura <- c('X','Y')
df <- data.frame(nomes, frase, numero)
df = cbind(df,locura)
head(df)
# tail(df)
# View(df)
df[nomes == 'Jubileu']
df[nomes == 'Jubileu']
df[nomes == 'Jubileu']
nome <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
locura <- c('X','Y')
df <- data.frame(nome, frase, numero)
df = cbind(df,locura)
head(df)
# tail(df)
# View(df)
df[nome == 'Jubileu']
df[numero >  1]
df[numero >  1]
setwd('/home/marcelocabral/projects/DataScience/R Azure ML/big_data_r_azure')
getwd()
nome <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
locura <- c('X','Y')
df <- data.frame(nome, frase, numero)
df = cbind(df,locura)
head(df)
# tail(df)
# View(df)
df[numero >  1]
read.csv('ar')
df_pacientes = data.frame(read.csv('arquivo/pacientes.csv', header = T,separator=','))
?read.csv
df_pacientes = data.frame(read.csv('arquivo/pacientes.csv', header = T,sep=','))
df_pacientes = data.frame(read.csv('arquivo/pacientes.csv', header = TRUE ,seF=','))
df_pacientes = data.frame(read.csv('arquivo/pacientes.csv', header = TRUE ,sep=','))
df_pacientes = data.frame(read.csv('arquivo/pacientes.csv', header = TRUE , sep=','))
View(df_pacientes)
sumary(df_pacientes)
sumary(df_pacientes)
summary(df_pacientes)
View(summary(df_pacientes))
setwd('/home/marcelocabral/projects/DataScience/R Azure ML/big_data_r_azure')
getwd()
nome <- c('Orácio','Jubileu')
frase <- c('O Jubileu está esquisito hoje tenho medo','Você falu pipoca')
numero <- c(1,2)
locura <- c('X','Y')
df <- data.frame(nome, frase, numero)
df = cbind(df,locura)
head(df)
# tail(df)
# View(df)
df[numero >  1]
?read.csv
df_pacientes = data.frame(read.csv('arquivo/pacientes.csv', header = TRUE , sep=','))
View(df_pacientes)
View(summary(df_pacientes))
summary(df_pacientes)
setwd("~/DataScience/R Azure ML/big_data_r_azure/")
getwd()
# Exercício 1 - Crie um vetor com 30 números inteiros
vector_int = c(1:30)
length(vector_int)
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matriz_ex2 = matrix(c(1:24), nrow = 4, ncol = 4)
View(matriz_ex2)
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
list_ex3 = list(vector_int,matriz_ex2)
View(list_ex3)
head(df)
head(df)
head(df)
df_tabla = data.frame(read.table('arquivo/effort.dat'))
head(df_tabla)
df_tabla = data.frame(read.table('arquivo/effort.dat'))
head(df_tabla)
View(df_tabla)
colnames(df_table) <- c("config", "esfc", "chang")
df_table = data.frame(read.table('arquivo/effort.dat'))
head(df_table = data.frame(read.table('arquivo/effort.dat'))
df_table = data.frame(read.table('arquivo/effort.dat'))
head(df_table)
colnames(df_table) <- c("config", "esfc", "chang")
head(df_table)
View(iris)
length(iris)
summary(iris)
?ggplot2
a <- ggplot(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
a <- ggplot2(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
qplot(Sepal.Length, Petal.Length, data = iris)
qplot(iris.Sepal.Length, iris.Petal.Length, data = iris)
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
View(iris)
library(ggplot2)
?ggplot2
qplot(Sepal.Length, Petal.Length, data = iris)
library(ggplot2)
qplot(Sepal.Length, Petal.Length, data = iris)
library(ggplot2)
qplot(Sepal.Length, Petal.Length, data = iris, color = Species)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
iris[Sepal.Length > 5.1]
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
# Adicionando um novo vetor a um dataframe existente
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
# Informações sobre o dataframe
str(pesq)
dim(pesq)
length(pesq)
# Obtendo um vetor de um dataframe
pesq$pais
pesq$nome
# Extraindo um único valor
pesq[1,1]
pesq[3,2]
# Número de Linhas e Colunas
nrow(pesq)
ncol(pesq)
# Primeiros elementos do dataframe
head(pesq)
head(mtcars)
# Últimos elementos do dataframe
tail(pesq)
tail(mtcars)
pesq[altura < 1.60,]
pesq[altura < 1.60, c('codigo', 'olhos')]
pesq
# DataFrames e Operações com DataFrame
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/FCD/BigDataRAzure/Cap02")
getwd()
# Criando um dataframe vazio
df <- data.frame()
class(df)
df
# Criando vetores vazios
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
df <- data.frame(c(nomes, idades, itens, codigos))
df
# Criando vetores
pais = c("Portugal", "Inglaterra", "Irlanda", "Egito", "Brasil")
nome = c("Bruno", "Tiago", "Amanda", "Bianca", "Marta")
altura = c(1.88, 1.76, 1.53, 1.69, 1.68)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
# Adicionando um novo vetor a um dataframe existente
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
# Informações sobre o dataframe
str(pesq)
dim(pesq)
length(pesq)
# Obtendo um vetor de um dataframe
pesq$pais
pesq$nome
# Extraindo um único valor
pesq[1,1]
pesq[3,2]
# Número de Linhas e Colunas
nrow(pesq)
ncol(pesq)
# Primeiros elementos do dataframe
head(pesq)
head(mtcars)
# Últimos elementos do dataframe
tail(pesq)
tail(mtcars)
# Data frames built-in do R
?mtcars
mtcars
View(mtcars)
# Filtro para um subset de dados que atendem a um critério
pesq[altura < 1.60,]
pesq[altura < 1.60, c('codigo', 'olhos')]
pesq
# Dataframes Nomeados
names(pesq) <- c("País", "Nome", "Altura", "Código", "Olhos")
pesq
colnames(pesq) <- c("Var 1", "Var 2", "Var 3", "Var 4", "Var 5")
rownames(pesq) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
pesq
# Carregando um arquivo csv
?read.csv
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
# Visualizando o dataset
View(pacientes)
head(pacientes)
summary(pacientes)
# Visualizando as variáveis
pacientes$Diabete
pacientes$status
pacientes$Status
# Histograma
hist(pacientes$Idade)
# Combinando dataframes
dataset_final <- merge(pesq, pacientes)
dataset_final
pesq[altura < 1.60,]
pesq[altura < 1.60, c('codigo', 'olhos')]
pesq
head(pesq)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
iris[iris.Sepal.Length > 5.1]
View(airquality)
View(sirs_sub)
irs_sub = subset(iris, iris.Sepal.Length > 5.1)
View(irs_sub)
irs_sub = subset(iris, iris.Sepal.Length > 5.1)
irs_sub = subset(iris, Sepal.Length > 5.1, c('Sepal.Length','Petal.Length') )
View(irs_sub)
irs_sub = subset(iris, Sepal.Length > 5.1 )
irs_sub = subset(iris, Sepal.Length > 5.1 )
View(irs_sub)
filter(iris, Sepal.Length > 5.1)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
library(dplyr)
filter(iris, Sepal.Length > 5.1)
