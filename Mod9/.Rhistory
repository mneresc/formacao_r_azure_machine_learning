install.packages('RMySQL')
install.packages('ggplot2')
install.packages('dbplyr')
install.packages('RMySQL')
install.packages('RMySQL')
library(RMySQL)
library(ggplot2)
library(dbplyr)
con = dbConnect(MySQL(),user = 'root', password='root',dbname='titanic',host='localhost')
dbGetQuery(con, query)
con = dbConnect(MySQL(),user = 'root', password='root',dbname='titanic',host='localhost')
query <- "select pclass, survived, avg(age) as media_idade WHERE survived = 1 GROUP BY survived"
dbGetQuery(con, query)
query <- "select pclass, survived, avg(age) as media_idade FROM titanic.titanic WHERE survived = 1 GROUP BY survived"
dados <- dbGetQuery(con, query)
ggplot(dados,aes(pclass, media_idade)+ geom_bar(stat="identity"))
query <- "select pclass, survived, avg(age) as media_idade FROM titanic.titanic WHERE survived = 1 GROUP BY pclass,survived"
dados <- dbGetQuery(con, query)
head(dados)
ggplot(dados,aes(pclass, media_idade)+ geom_bar(stat="identity"))
ggplot(dados,aes(pclass, media_idade))+ geom_bar(stat="identity")
ggplot(dados,aes(pclass, media_idade))
ggplot(dados,aes(pclass, media_idade))+ geom_bar(stat="identity")
con2 = src_mysql(MySQL(),user = 'root', password='root',dbname='titanic',host='localhost')
con2 = src_mysql(user = 'root', password='root',dbname='titanic',host='localhost')
library(dplyr)
con2 = src_mysql(user = 'root', password='root',dbname='titanic',host='localhost')
collect()
dados2 <- %>%
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
dados2 <-
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
dados2 <- tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
dados2 <-
con2  %>%
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
head(dados2)
?summarise
con2 = src_mysql(user = 'root', password='root',dbname='titanic',host='localhost')
dados2 <-
con2  %>%
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
dados2 <-
con2  %>%
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
dados2 <- con2  %>%
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
dados2 <- con2  %>%
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
install.packages('RMySQL')
install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
library(ggplot2)
library(dbplyr)
library(dplyr)
dados2 <- con2  %>%
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
con2 = src_mysql(user = 'root', password='root',dbname='titanic',host='localhost')
dados2 <- con2  %>%
tbl('titanic') %>%
select(pclass,sex,survived) %>%
group_by(pclass,sex) %>%
summarise(survavival_ratio = avg(survived)) %>%
collect()
View(dados2)
install.packages('devtools')
library(devtools)
install_github('mongosoup/rmongodb')
mongo <- mongo.create()
library(rmongodb)
mongo <- mongo.create()
mongo.is.connected(mongo)
if(mongo.is.connected(mongo)){
mongo.get.databases()
}
mongo.get.databases(mongo)
colecao <- "users.contatos"
mongo.count(colecao)
mongo.count(mongo,colecao)
res <- mongo.distinct(mongo,colecao,"city")
headr(res)
head(res)
typeof(res)
mongo.find.one(mongo,colecao)
resOne <- mongo.find.one(mongo,colecao)
View(resOne)
head(resOne)
resOne <- mongo.find.one(mongo,colecao)
head(resOne)
resOne <- mongo.find.one(mongo,colecao)
head(resOne)
print(resOne)
mongo.destroy(mongo)
setwd("~/projects/DataScience/R Azure ML/big_data_r_azure/Mod3/")
getwd()
setwd("~/projects/DataScience/R Azure ML/big_data_r_azure/Mod3/")
getwd()
setwd("~/projects/DataScience/R Azure ML/big_data_r_azure/Mod9")
mean(media)
media = c(10,20,30,40)
mean(media)
media = c(10,20,30,40,50)
mean(media)
mediana = c(10,20,30,40,50)
median(mediana)
print(median(mediana))
print(mean(media))
moda = function(dados){
vector = table(as.vector(dados))
names(vector)[vector == max(vector)]
}
moda(c(10,10,20,20,20,20,30,40))
list_amplitude = c(10,10,20,20,20,20,30,40)
max(list_amplitude)
min(list_amplitude)
print(max(list_amplitude))
print(min(list_amplitude))
list_amplitude = c(10,10,20,20,20,20,30,40)
print(diff(range(list_amplitude)))
list_quartil = c(54, 55, 56, 57, 58, 59, 60, 61, 62, 63)
quartil(list_quartil)
quartile(list_quartil)
quantile(list_quartil)
list_quartil = c(54, 55, 56, 57, 58, 59, 60, 61, 62, 63,64)
quantile(list_quartil)
list_quartil = c(54, 55, 56, 57, 58, 59, 60, 61, 62, 63,64)
quantile(list_quartil,c(.10))
Maq1 = c(181.9, 180.8, 181.9, 180.2, 181.4)
Maq2 = c(180.1, 181.8, 181.5, 181.2, 182.4)
Maq3 = c(182.1, 183.7, 182.1, 180.2, 181.9)
mean(Maq1)
mean(Maq2)
mean(Maq3)
sd(Maq1)
sd(Maq2)
sd(Maq3)
dados = c(18, 20, 20, 21, 22, 24, 25, 25, 26, 27, 29, 29,
30, 30, 31, 31, 32, 33, 34, 35, 36, 36, 37, 37,
37, 37, 38, 38, 38, 40, 41, 43, 44, 44, 45, 45,
45, 46, 47, 48, 49, 50, 51, 53, 54, 54, 56, 58, 62, 65)
hist(dados, main = "Número de acidentes diários", xlab = 'Acidentes', ylab = 'Frequência')
```{r echo=FALSE}
dados = c(18, 20, 20, 21, 22, 24, 25, 25, 26, 27, 29, 29,
30, 30, 31, 31, 32, 33, 34, 35, 36, 36, 37, 37,
37, 37, 38, 38, 38, 40, 41, 43, 44, 44, 45, 45,
45, 46, 47, 48, 49, 50, 51, 53, 54, 54, 56, 58, 62, 65)
hist(dados, main = "Número de acidentes diários", xlab = 'Acidentes', ylab = 'Frequência')
hist(dados, main = "Número de acidentes diários", xlab = 'Acidentes', ylab = 'Frequência', breaks = 5)
mean(dados_assimetria)
sd(dados_assimetria)
median(dados_assimetria)
#Histograma mostra o que parece ser uma assimetria
dados_assimetria = c(18, 20, 20, 21, 22, 24, 25, 25, 26, 27, 29, 29,
30, 30, 31, 31, 32, 33, 34, 35, 36, 36, 37, 37,
37, 37, 38, 38, 38, 40, 41, 43, 44, 44, 45, 45,
45, 46, 47, 48, 49, 50, 51, 53, 54, 54, 56, 58, 62, 65)
hist(dados_assimetria, main = "Número de Acidentes Diários", xlab = "Acidentes", ylab = "Frequência")
mean(dados_assimetria)
sd(dados_assimetria)
median(dados_assimetria)
library(moments)
install.packages("moments")
library(moments)
SK = skewness(dados)
print(SK)
dados_coeficiente = rnorm(1000)
SK = skewness(dados_coeficiente)
hist(dados_coeficiente)
print(SK)
hist(dados_coeficiente)
print(SK)
library(moments)
dados_coeficiente_kurtose = rnorm(1000)
CK = kurtosis(dados_coeficiente_kurtose)
hist(dados_coeficiente_kurtose)
print(CK)
dados_coeficiente_kurtose = rnorm(1000)
CK = kurtosis(dados_coeficiente_kurtose)
print(CK)
hist(dados_coeficiente_kurtose)
CK = kurtosis(dados_coeficiente_kurtose)
print(CK - 2.37652)
library(ggplot2)
library(ggplot2)
datasim <- data.frame(dados_coeficiente_kurtose)
ggplot(datasim, aes(x = dados_coeficiente_kurtose), binwidth = 2) +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.5) +
geom_density(colour = 'blue') + xlab(expression(bold('Dados'))) +
ylab(expression(bold('Densidade')))
dados = c(18, 20, 20, 21, 22, 24, 25, 25, 26, 27, 29, 29,
30, 30, 31, 31, 32, 33, 34, 35, 36, 36, 37, 37,
37, 37, 38, 38, 38, 40, 41, 43, 44, 44, 45, 45,
45, 46, 47, 48, 49, 50, 51, 53, 54, 54, 56, 58, 62, 65)
mean(dados)
sd(dados)
median(dados)
range(dados)
quantile(dados)
boxplot(dados, main = "Número de Acidentes Diários")
source('~/.active-rstudio-document', echo=TRUE)
my_data <- mtcars
head(my_data)
install.packages("ggpubr")
library("ggpubr")
install.packages("rstatix")
install.packages("car")
install.packages("rstatix", repos = "https://cloud.r-project.org")
install.packages("car", dependencies = TRUE)
install.packages("pbkrtest")
install.packages("ggpubr")
install.packages("ggpubr",dependencies=TRUE)
install.packages("rstatix",dependencies=TRUE)
install.packages("ggpubr",dependencies=TRUE)
install.packages("cowplot",dependencies=TRUE)
install.packages("tidyselect",dependencies=TRUE)
install.packages("tidyselect", dependencies = TRUE)
install.packages("car", dependencies = TRUE)
source('~/projects/DataScience/FCD/RAzureML/scripts/Cap09/Exercicios-Cap09.R')
rnorm(100,3,.25)
x <- rnorm(100,3,.25)
hist(x)
hist(x)
# Exercício 2 - Crie o histograma dos dados gerados no item anterior e adicione uma camada com a curva da normal.
desvio_x <- sd(x)
hist(x, curve(dnorm(x,mean = mean(x),sd = sd(x))))
hist(x,density=20, breaks=5, prob=TRUE, curve(dnorm(x,mean = mean(x),sd = sd(x))))
hist(x)
curve(dnorm(x,mean = mean(x),sd = sd(x)))
hist(x)+
curve(dnorm(x,mean = mean(x),sd = sd(x)))
hist(x),
curve(dnorm(x,mean = mean(x),sd = sd(x)))
hist(x),
curve(dnorm(x,mean = mean(x),sd = sd(x)))
hist(x)
curve(dnorm(x,mean = mean(x),sd = sd(x)))
curve(dnorm(x, mean=mean(x), sd=sd(x)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(x, density=20, breaks=20, prob=TRUE,
xlab="x-variable", ylim=c(0, 2),
main="normal curve over histogram")
curve(dnorm(x, mean=mean(x), sd=sd(x)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
?hist
hist(x, density=20, breaks=20, prob=TRUE,xlab="x-variable", ylim=c(0, 2),main="normal curve over histogram")
curve(dnorm(x, mean=mean(x), sd=sd(x)),col="darkblue", lwd=2, add=TRUE, yaxt="n")
dpois(2, 20)
dpois(7, 20)
dpois(7, 80)
dbinom(7,10, 0.8)
pnorm(84,mean=72,sd=15.72)
# Aplicamos a função pnorm da distribuição normal com média 72 e desvio padrão 15.2.
# Como estamos procurando a porcentagem de alunos com pontuação superior a 84,
# estamos interessados na cauda superior da distribuição normal.
pnorm(84, mean=72, sd=15.2, lower.tail=FALSE)
pnorm(84,mean=72,sd=15.72,lower.tail=FALSE)
# Exercício 5 - Suponha que o tempo médio de check-out de um caixa de supermercado seja de três minutos.
# Encontre a probabilidade de um check-out do cliente ser concluído pelo caixa em menos de dois minutos.
pexp(2, rate=1/3)
# Exercício 6 - Selecione dez números aleatórios entre um e três.
# Aplicamos a função de geração runif da distribuição uniforme para gerar dez números aleatórios entre um e três.
runif(10, min=1, max=3)
# Exercício 7 - Se houver 12 carros atravessando uma ponte por minuto, em média,
# encontre a probabilidade de ter 15 ou mais carros cruzando a ponte em um determinado minuto.
ppois(14, lambda=12)
# Exercício 8 - Suponha que haja 12 questões de múltipla escolha em um questionário de inglês.
# Cada questão tem cinco respostas possíveis e apenas uma delas está correta.
dbinom(4, size=12, prob=0.2)
dbinom(4, size=12, prob=0.2)
