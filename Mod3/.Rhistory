?matplot
example(matplot)
example(matplot)
17%2
17%%2
7^7
7+7
7*7
7^7
17%%2
x>0
x=666
y=0
x>0
x>0 & y<1
x=666
y=0
x>0 & y<1
x>0 || y<1
typeof(100)
mode(100)
x=100
mode(100)
typeof(100)
#lista
lista = c('Sócrates','Ariatóteles','Platão')
mode(lista)
#lista
lista = c('Sócrates','Ariatóteles','Platão',1)
mode(lista)
#lista
lista = c('Sócrates','Ariatóteles','Platão')
#closure
func = function(x) {x**2}
print(funt(2))
#closure
func = function(x) {x**2}
print(funt(2))
func = function(x) {x**2}
print(funt(2))
print(func(2))
x=100
# modo de armazenamento de um objeto
mode(100)
# verificao tipo da variavel
typeof(100)
#lista
lista = c('Sócrates','Ariatóteles','Platão')
mode(lista)
#closure
func = function(x) {x**2}
print(func(2))
num <- 7
class(num)
typeof(num)
mode(numm)
mode(num)
is.integer(num)
num_int = num.asinteger()
num_int = as.integer(num)
char = c('Data','Science','Academy')
class(char)
mode(char)
typeof(char)
complex = 2.5 + 4i
class(complex)
mode(complex)
typeof(complex)
print(complex)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
help(matrix)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <-matrix(1:20, nrow = 2)
help(matrix)
View(matriz)
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <- matrix(1:20, nrow = 2)
# array 2 ou mais dimenssões
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
length(iris)
mode(iris)
#lista composta
lista1 <- list(a = matriz, b = vetor)
View(lista1)
View(lista1)
View(lista1)
#veror - 1 dimensao e 1 tipo de dado
vetor <- c(1:20)
#matriz 2 dimensoes e 1 tipo de dado
matriz <- matrix(1:20, nrow = 2)
# array 2 ou mais dimenssões
arr <- array(1:20, dim = c(3, 3, 3))
print(arr)
#vários tipos de dado - Dataframe
View(iris)
length(iris)
mode(iris)
#lista composta
lista1 <- list(a = matriz, b = vetor)
lista1[c] = iris
View(lista1)
lista1[c] = iris
lista1[c] = vetor
mode(iris)
lista1['c'] = vetor
lista1.append(vetor)
install.packages('sqldf')
library(sqldf)
sqldf('SELECT equipe, sum(num_cestas) FROM tabela_basquete grop by equipe')
sqldf('SELECT equipe, sum(num_cestas) FROM tabela_basquete group by equipe')
tabela_basquete <-
data.frame(equipe = gl(5, 5, labels = paste("Equipe", LETTERS[1:5])),
jogador = sample(letters, 25),
num_cestas = floor(runif(25, min=0, max=50)))
View(tabela_basquete)
summary(tabela_basquete)
sqldf('SELECT equipe, sum(num_cestas) FROM tabela_basquete group by equipe')
#t apply soma, agrupado funcao
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, sum)
print(unlist(list1))
# funcoes especiais
#vetor com elementos da lista
list1 = list(c(1,2,3),c(4,5,6))
print(unlist(list1))
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(list1,mean)
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(mean,list1)
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(mean,unlist(list1))
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(mean,list1)
#do.call()
#Aplica uma funcao a o objeto inteiro
do.call(rbind,list1)
?rbind
print(strsplit(texto,""))
print(strsplit(texto," "))
#strplit
texto <- "Seu tranca ruas é uma beleza eu nunca vi um Exu assim"
print(strsplit(texto," "))
#horário do sistemas
hoje <- Sys.Date()
print(hoje)
setwd("~/projects/DataScience/R Azure ML/big_data_r_azure/Mod3/")
#horário do sistemas
hoje <- Sys.Date()
print(hoje)
class(hoje)
as.Date('2010-10-10')
class(data)
format(data,'%d/%m/%Y')
format(data,'%d/%m/%Y')
print(data_br)
data_br <- format(data,'%d/%m/%Y')
print(data_br)
data_br <- format(data,format='%d/%m/%Y')
print(data_br)
setwd("~/projects/DataScience/R Azure ML/big_data_r_azure/Mod3/")
#horário do sistemas
hoje <- Sys.Date()
class(hoje)
data_1 <-as.Date('2010-10-10')
class(data_1)
data_br <- format(data_1,format='%d/%m/%Y')
print(data_br)
data_1 + 10
data_br <- format(data_1,format='%d/%m/%Y')
print(data_br)
data_add <-data_1 + 10
data_br <- format(data_1,format='%d/%m/%Y')
print(data_br)
data_add <- data_1 + 10
data_br <- format(data_1,format='%d/%m/%Y')
print(data_br)
data_add <- data_1 + 10
data_br_add <- format(data_add,format='%d/%m/%Y')
print(data_br_add)
data_add <- data_1 + 45
data_br_add <- format(data_add,format='%d/%m/%Y')
print(data_br_add)
list1 <- list(a=(1:20),b=(45:77))
sapply(list1, sum)
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
list.files(path=".")
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
list.files(path=".")
df1 <- ddata.frame(c("One","Zero","One"),c(TRUE,FALSE,TRUE),c(0,1,0))
df1 <- data.frame(c("One","Zero","One"),c(TRUE,FALSE,TRUE),c(0,1,0))
View(df1)
df1 <- data.frame(caracter = c("One","Zero","One"),boleano = c(TRUE,FALSE,TRUE),numerico = c(0,1,0))
View(df1)
# Exercício 3 - Considere o vetor abaixo.
# Crie um loop que verifique se há números maiores que 10 e imprima o número e uma mensagem no console.
?for
# Exercício 3 - Considere o vetor abaixo.
# Crie um loop que verifique se há números maiores que 10 e imprima o número e uma mensagem no console.
?for
vec1 <- c(12, 3, 4, 19, 34)
vec1
for(x in vec1){
if(x > 10){
print(x)
}
}
for(y in lst2){
print(y)
}
lst2 <- list(2, 3, 5, 7, 11, 13)
lst2
for(y in lst2){
print(y)
}
# Multiplicação element-wise
mat1*mat2
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat2 <- t(mat1)
mat2
# Multiplicação element-wise
mat1*mat2
mat1%*%mat2
list1 = list(nomeado = vec_my, inominado=c('0',3,1))
# Exercício 6 - Crie um vetor, matriz, lista e dataframe e faça a nomeação de cada um dos objetos
vec_my = c(10,20,30,40)
list1 = list(nomeado = vec_my, inominado=c('0',3,1))
df_my <- data.frame(lista = list1, vec = vec_my)
# Exercício 6 - Crie um vetor, matriz, lista e dataframe e faça a nomeação de cada um dos objetos
vec_my = c(10,20,30)
list1 = list(nomeado = vec_my, inominado=c('0',3,1))
df_my <- data.frame(lista = list1, vec = vec_my)
View(df_my)
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
index <- witch(mat1 %in% sample(mat1,50))
index <- which(mat1 %in% sample(mat1,50))
# Exercício 7 - Considere a matriz abaixo. Atribua valores NA de forma aletória para 50 elementos da matriz
# Dica: use a função sample()
mat2 <- matrix(1:90, 10)
mat2
mat2 <- matrix(1:90, 10)
mat2
index <- which(mat2 %in% sample(mat2,50))
mat2[index] <- NA
View(mat2)
?which
rowsum(mat1)
mat1.rowsum()
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat1.rowsum()
rowsum(mat1)
rowSums(mat1)
sort(a)
a <- c(100, 10, 10000, 1000)
a
sort(a)
vec_forced <- unlist(mat1)
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
vec_forced <- unlist(mat1)
for(x in vec_forced){
if(x > 15){
print(x)
}
}
View(mat1)
vec_forced <-sort( unlist(mat1))
for(x in vec_forced){
if(x > 15){
print(x)
}
}
